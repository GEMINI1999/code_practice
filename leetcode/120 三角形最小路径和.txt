方法1 自顶向下
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int[][] dp = new int[triangle.size()][triangle.size()];
        dp[0][0] = triangle.get(0).get(0);
        for(int i = 1; i < triangle.size(); i++){
            dp[i][0] = dp[i - 1][0] + triangle.get(i).get(0);//最左侧
            List<Integer> t = triangle.get(i);
            for(int j = 1; j < t.size(); j++){//中间部分
                dp[i][j] = Math.min(dp[i - 1][j - 1], dp[i - 1][j]) + triangle.get(i).get(j);
            }
            dp[i][i] = dp[i - 1][i - 1] + triangle.get(i).get(i);//最右侧
        }
        //数组最后一行的最小值就是该三角形的最优路径值
        int minRes = dp[triangle.size() - 1][0];
        for(int i = 1; i < triangle.size(); i++){
            minRes = Math.min(minRes, dp[triangle.size() - 1][i]);
        }
        return minRes;
    }
}

方法2 自底向上 可以从二维优化为一维dp[j] = Math.min(dp[j], dp[j+1]) +  triangle.get(i).get(j);
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int[][] dp = new int[triangle.size() + 1][triangle.size() + 1];
        for(int i = triangle.size() - 1; i >= 0; i--){
            List<Integer> t = triangle.get(i);
            for(int j = 0; j < t.size(); j++){//中间部分
                dp[i][j] = Math.min(dp[i + 1][j + 1], dp[i + 1][j]) + triangle.get(i).get(j);
            }
        }
        return dp[0][0];
    }
}
